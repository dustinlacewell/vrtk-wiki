* TODO Zinnia
  This page is community documentation for [[https://github.com/ExtendRealityLtd/Zinnia.Unity][Zinnia.Unity]], a package in
  the VRTK family.

  The generated API documentation can be found [[https://dustinlacewell.github.io/vrtk-wiki/zinnia/index.html][here]].

** Action
   Actions have two primary functions:
   - Receive values
   - Emit values

   There are a few ways an action can recieve values:
   - Its ~Receive()~ method.
   - An Action in its ~Sources~ list.

   When an Action receives a value, it also emits it.

   If an Action is a source for any other Action, values will be
   propagated along.

   Each Action has a number of Unity Events as well:
      - Activated
      - Deactivated
      - Activation State Changed
      - Value Changed

   By using the Value Changed event, you can respond to an Action's
   value in basically any way needed.

*** Collection
    Scripts for observing lists of action related types.

**** ActionObservableList                                               :api:
     Maintains a list of Zinnia Actions and emits events when that
     list is changed.

**** ActionRegistrarSourceObservableList                                :api:
     Maintains a list of [[ActionRegistrar]].ActionSource instances and
     emits events when that list changes.

*** Action                                                              :api:
    Base class for all [[Action]] types.

    Each action has a data-type, like float or GameObject.

    - Sources: A list of other Actions which this Action listens to.
    - UnityEvents:
      - Activation State Changed
      - Activated
      - Value Changed
      - Deactivated

*** AllAction                                                           :api:
    [[Action]] that emits a boolean when all the given actions are
    `Action.IsActivated`.

    - Actions: [[ActionObservableList]] of actions which all need to be
      activated.

*** AnyAction                                                           :api:
    [[Action]] that emits a boolean when any of the given actions are
    `Action.IsActivated`.

    - Actions: [[ActionObservableList]] of actions any of which need to be
      activated.

*** BooleanAction                                                       :api:
    [[Action]] that receives and emits booleans.

*** FloatAction                                                         :api:
    [[Action]] that receives and emits floats.

*** StateEmitter                                                        :api:
    An [[IProcessable]] which causes an [[Action]] to re-emit it's last value
    each time the process is run.

*** SurfaceChangeAction                                                 :api:
    [[Action]] that receives a [[SurfaceData]] current and emits when the
    current and previous positions exceed the specified distance.

*** ToggleAction                                                        :api:
    Alternates between emitting its Activated and Deactivated events
    each time Recieve is called.

*** Vector2Action                                                       :api:
    [[Action]] that recieves and emits Vector2 values.

*** ActionRegistrar                                                     :api:
    Sets the sources of a target [[Action]] based on a list of other
    Actions.

    The sources of an ActionRegistar are of type `ActionSource` which
    are a Action/GameObject pair. The GameObject is the one that
    contains the Action.

    The ActionRegistrar also maintains a list of GameObjects called
    the `SourceLimits`. This is basically a filter. Only the
    ActionSources that have a GameObject in this list are actually
    added as sources to the target Action.

    - Target: The Action whos sources will be set.
    - Sources: A list of ActionSources who's Actions will be set as
      the sources on the Target action.
    - SourceLimits: A list of GameObjects denoting valid parent
      GameObjects.

** Association
   Associations create a relation between some condition and the state
   of items in a collection.

   That is to say, some aspect of some collection of items, is
   determined by some condition.

   The only case right now is [[GameObjectsAssociation]] which relates
   whether a collection of GameObjects are (in)active based on some
   condition.
*** Collection
**** GameObjectsAssociationObservableList                               :api:
     An observable list of [[GameObjectsAssociation]] instances.
*** GameObjectsAssociation                                              :api:
    Abstract class which references a [[GameObjectObservableList]] of
    objects to (de)activate based on abstract boolean method
    `ShouldBeActive`.
*** GameObjectsAssociationActivator                                     :api:
    An [[IProcessable]] which applies the action of a list of
    [[GameObjectsAssociation]] causing their associated GameObjects to be
    (de)activated accordingly.
*** LoadedXrDeviceAssociation                                           :api:
    (De)activates GameObjects based on whether the currently loaded XR
    device name matches the `XrDeviceNamePattern` regular expression.

    - XrDeviceNamePattern: Regular expression to match XR device names.
** Cast
   Behaviours which perform raycasts.
*** Collection
**** Mutation
***** PointsCastPropertyMutator                                         :api:
      Mutates the properties of a target [[PointsCast]].

      A GameObject maybe set as the `Target` using the `SetTarget`
      method which will search for the [[PointsCast]] as either a direct,
      descendant, or ancestor.

*** PhysicsCast                                                         :api:
    A MonoBehaviour which allows for customizing the settings of a
    Raycast at edit time in the inspector. This can be used by the
    various casting components.

*** PointsCast                                                          :api:
    Abstract [[IProcessable]] for casting components that result in points
    along the cast.

    Each subclass must implement the `DoCastPoints` method. Hits are
    filtered through the `TargetValidity` rule.

    - Origin: Starting point of the cast.
    - PhysicsCast: An optional [[PhysicsCast]] to configure the raycast.
    - TargetValidity: [[RuleContainer]] controlling which hits are valid.
    - DestinationPointOverride: Override the destination location
      point in world space.
    - TargetHit: `RaycastHit` of the latest hit, or null.
    - IsTargetHitValid: Whether the latest `TargetHit` is valid based
      on `TargetValidity` rule.
    - Points: The points along the most recent cast.
    - EventData: The [[EventData]] for the latest cast.

**** EventData                                                          :api:
     Holds data about a [[PointsCast]] event.

     - HitData: `RaycastHit?` The result of the most recent
       cast. `null` when it didn't hit anything.
     - IsValid: Whether most recent HitData is valid based on the
       TargetValidity rule.
     - Points: Vector3 points along the most recent cast.

*** FixedLineCast                                                       :api:
    A [[StraightLineCast]] except that it only checks for hits at the end
    of the limited-distance raycast. If no hit is detected, the second
    point returned is `null`.

*** StraightLineCast                                                    :api:
    A [[PointsCast]] which performs a raycast from an origin and direction
    to a maximum distance. It returns two points. The first point is
    the origin. The second point is either the maximum position of the
    line, or the location of any collider hit along the way.

*** ParabolicLineCast                                                   :api:
    A [[PointsCast]] which returns the points at the origin, target, and a
    parabolic arc of points in between.

** TODO Data
*** Attribute
    These attributes are used by other Zinnia components to customize
    their inspector interface. You probably wont need to use these
    yourself.

**** CustomInspectorTextAttribute                                       :api:
     Allows for specifing custom text in Zinnia component inspectors.

**** MinMaxRangeAttribute                                               :api:
     Allows for defining a min and max range for float fields in
     Zinnia component inspectors.

**** RestrictedAttribute                                                :api:
     Allows for making fields non-editable in Zinnia component
     inspectors.

**** TypePickerAttribute                                                :api:
     Allow for displaying pickers for
     `Zinnia.Data.Type.SerializableType` fields in Zinnia component
     inspectors.
*** Collection
**** Counter
***** ObservableCounter                                                 :api:
      Allows counting the amount of attempts an element is added or
      removed from a Dictionary. 

      You can ~IncreaseCount(element)~ to increase the count.
      You can ~DecreaseCount(element)~ to decrease it.
      ~RemoveFromCount(element)~ will remove it completely.
      And ~Clear()~ will remove all entries.

      Being an observable it also features a number of events you can
      respond to:

      - Added: when an element is added for the first time
      - Removed: when an element is removed completely

***** GameObjectObservableCounter                                       :api:
      A [[ObservableCounter]] for GameObjects.
**** List
     [[ObservableList]] based components that hold a list of objects
     of a certain type.
***** ObservableList                                                    :api:
      Holds a list of objects of a given type and has a number of
      events for responding when that list changes.

      You can ~Add(element)~ or ~Remove(element)~ add and remove
      items. Many methods have "Unique" version, like
      ~AddUnique(element)~ to prevent duplication. Check the API
      documentation for the full method listing.

      It has a ~CurrentIndex~ which you can use for stuff. It gets
      clamped based on how many items there are. Most methods that
      take an index will similarly clamp it.

      The items in the list can be accessed via ~SubscribableElements~
      and ~NonSubscribableElements~ depending on whether you care to
      keep track item membership on the items themselves. You probably
      just want ~SubscribableElements~.

      Use ~Contains~ to check if an item is in the list.

      There are a number of events you can subscribe to such ass
      ~Added~, ~Removed~, ~Emptied~ and so on. Check the API docs for
      the full listing.
***** BehaviourObservableList                                           :api:
      An [[ObservableList]] that holds ~Behaviour~-based types.
***** DefaultObservableList                                             :api:
      An intermediate class between [[ObservableList]] and the type
      specific classes to prevent some duplicate code. You probably
      don't need to use this directly.
***** FloatObservableList                                               :api:
      An [[ObservableList]] that holds ~float~ values.
***** GameObjectObservableList                                          :api:
      An [[ObservableList]] that holds GameObject references.
***** GameObjectRelationObservableList                                  :api:
      An [[ObservableList]] that holds ~GameObjectRelationObservableList.Relation~ values.

      A ~Relation~ is a type with two GameObject fields:
      - ~Key~, a GameObject
      - ~Value~, a GameObject
      
***** TODO SerializableTypeBehaviourObservableList                      :api:
***** TODO SerializableTypeComponentObservableList                      :api:
***** StringObservableList                                              :api:
      An [[ObservableList]] that holds ~string~ values.
***** UnityObjectObservableList                                         :api:
      An [[ObservableList]] that holds ~UnityObject~ references.
***** Vector2ObservableList                                             :api:
      An [[ObservableList]] that holds ~Vector2~ values.
***** Vector3ObservableList                                             :api:
      An [[ObservableList]] that holds ~Vector3~ values.
**** Stack
***** ObservableStack                                                   :api:
      Holds a stack of objects of a given type and has a number of
      events for responding when that stack changes.

      You can ~Push(element)~ or ~Pop()~ elements.

      You can get the items in the stack with the ~Stack~ property.

      There are a number of events you can listen to such ~Pushed~,
      ~Popped~ and others. Check the API docs for a full reference.

***** GameObjectObservableStack                                         :api:
      An [[ObservableStack]] that holds GameObject references.
*** Enum
**** TransformProperties
     A simple enum denoting ~Position~, ~Rotation~ or ~Scale~.
*** TODO Operation
**** TODO Extraction
     Extraction components return a specific piece of data from a
     referenced object.
***** TODO GameObjectExtractor                                          :api:
      Abstract class for extractors returning GameObjects.

***** TODO ComponentGameObjectExtractor                                 :api:
***** TODO SurfaceDataCollisionPointExtractor                           :api:
***** TODO TransformDataGameObjectExtractor                             :api:
***** TODO TransformDirectionExtractor                                  :api:
***** TODO TransformEulerRotationExtractor                              :api:
***** TODO TransformPositionExtractor                                   :api:
***** TODO TransformPropertyExtractor                                   :api:
***** TODO TransformScaleExtractor                                      :api:
***** TODO Vector2ComponentExtractor                                    :api:
***** TODO Vector3Extractor                                             :api:
**** TODO Mutation
***** TODO RigidbodyPropertyMutator                                     :api:
***** TODO TransformEulerRotationMutator                                :api:
***** TODO TransformPositionMutator                                     :api:
***** TODO TransformPropertyMutator                                     :api:
***** TODO TransformScaleMutator                                        :api:
**** GameObjectCloner
     Produces clones of a GameObject.

     Set ~Source~ to the GameObject to clone and optionally specify a
     ~Parent~ to add clones under. Calling ~Clone()~ will clone
     ~Source~ or you can clone any GameObject by calling
     ~Clone(source)~.

     A single event is raised ~Cloned~.
*** TODO Type
**** TODO Transformation
***** TODO Aggregation
****** TODO CollectionAggregator                                        :api:
****** TODO FloatAdder                                                  :api:
****** TODO FloatMultiplier                                             :api:
****** TODO Vector2Multiplier                                           :api:
****** TODO Vector3Multiplier                                           :api:
****** TODO Vector3Subtractor                                           :api:
***** TODO Conversion
****** TODO AngleToVector2Direction                                     :api:
****** TODO BooleanToFloat                                              :api:
****** TODO FloatToBoolean                                              :api:
****** TODO FloatToVector2                                              :api:
****** TODO FloatToVector3                                              :api:
****** TODO Vector2ToAngle                                              :api:
****** TODO Vector2ToFloat                                              :api:
****** TODO Vector2ToVector3                                            :api:
****** TODO Vector3ToFloat                                              :api:
****** TODO Vector3ToVector2                                            :api:
***** TODO FloatRangeValueRemapper                                      :api:
***** TODO Transformer                                                  :api:
***** TODO Vector3MagnitudeSetter                                       :api:
***** TODO Vector3Restrictor                                            :api:
**** TODO FloatRange
**** TODO HeapAllocationFreeReadOnlyList
**** TODO SerializableType                                              :api:
**** TODO SurfaceData                                                   :api:
**** TODO TransformData                                                 :api:
**** TODO Vector3State
** TODO Event
*** TODO Proxy
**** TODO EmptyEventProxyEmitter                                        :api:
**** TODO EventProxyEmitter                                             :api:
**** TODO FloatEventProxyEmitter                                        :api:
**** TODO GameObjectEventProxyEmitter                                   :api:
**** TODO RestrictableSingleEventProxyEmitter                           :api:
**** TODO SingleEventProxyEmitter                                       :api:
**** TODO SurfaceDataProxyEmitter                                       :api:
**** TODO TransformDataProxyEmitter                                     :api:
*** TODO BehaviourEnabledObserver                                       :api:
** TODO Extension
*** TODO ArraySortExtensions                                            :api:
*** TODO BehaviourExtensions                                            :api:
*** TODO ColliderExtensions                                             :api:
*** TODO ComponentExtensions                                            :api:
*** TODO FloatExtensions                                                :api:
*** TODO GameObjectExtensions                                           :api:
*** TODO IReadOnlyCollectionExtensions                                  :api:
*** TODO RuleContainerExtensions                                        :api:
*** TODO TransformDataExtensions                                        :api:
*** TODO TransformExtensions                                            :api:
*** TODO Vector2Extensions                                              :api:
*** TODO Vector3Extensions                                              :api:
** TODO Haptics
*** TODO Collection
**** TODO HapticProcessObservableList                                   :api:
*** TODO AudioClipHapticPulser                                          :api:
*** TODO AudioSourceHapticPulser                                        :api:
*** TODO HapticProcess                                                  :api:
*** TODO HapticProcessor                                                :api:
*** TODO HapticPulser                                                   :api:
*** TODO RoutineHapticPulser                                            :api:
*** TODO TimedHapticPulser
*** TODO XRNodeHapticPulser                                             :api:
** TODO Pointer
*** TODO Operation
**** TODO Mutation
***** TODO PointerElementPropertyMutator                                :api:
*** TODO ObjectPointer                                                  :api:
*** TODO PointerElement                                                 :api:
** TODO Process
*** TODO Component
**** TODO GameObjectSourceTargetProcessor                               :api:
**** TODO SourceTargetProcessor                                         :api:
*** TODO Moment
**** TODO Collection
***** TODO MomentProcessObservableList                                  :api:
**** TODO CompositeProcess                                              :api:
**** TODO MomentProcess                                                 :api:
**** TODO MomentProcessor                                               :api:
*** TODO EventProcess                                                   :api:
*** TODO IProcessable                                                   :api:
*** TODO ProcessContainer                                               :api:
** TODO Rule
*** TODO Collection
**** TODO RuleContainerObservableList                                   :api:
**** TODO RulesMatcherElementObservableList                             :api:
*** TODO ActiveInHierarchyRule                                          :api:
*** TODO AllRule                                                        :api:
*** TODO AnyBehaviourEnabledRule                                        :api:
*** TODO AnyComponentTypeRule                                           :api:
*** TODO AnyLayerRule                                                   :api:
*** TODO AnyRule                                                        :api:
*** TODO AnyTagRule                                                     :api:
*** TODO GameObjectRule                                                 :api:
*** TODO IRule                                                          :api:
*** TODO ListContainsRule                                               :api:
*** TODO NegationRule                                                   :api:
*** TODO Rule                                                           :api:
*** TODO RuleContainer                                                  :api:
*** TODO RulesMatcher                                                   :api:
** TODO Tracking
*** TODO CameraRig
**** TODO Collection
***** TODO LinkedAliasAssociationCollectionObservableList               :api:
**** TODO Operation
***** TODO Extraction
****** TODO PlayAreaDimensionsExtractor                                 :api:
**** TODO LinkedAliasAssocationCollection
*** TODO Collision
**** TODO Active
     There are a number of classes that coordinate active collision
     tracking:
     - [[CollisionNotifier]]: Emits events related to collisions.
     - [[CollisionNotifier.EventData]]: Holds information related to
       collisions.
     - [[ActiveCollisionsContainer]]: Holds a collection of current
       collisions raised by a [[CollisionNotifier]].
     - [[ActiveCollisionPublisher]]: Sends collision information to
       the things involved in collisions.
     - [[ActiveCollisionConsumer]]: Receives collision information
       when involved in collisions.

     These classes attempt to communicate data about collisions
     between an [[ActiveCollisionPublisher]] and any number of
     [[ActiveCollisionConsumer]]s.

     When collisions take place, a [[CollisionNotifier]]'s events can
     be configured to add the associated
     [[CollisionNotifier.EventData]] to an
     [[ActiveCollisionsContainer]].

     When an [[ActiveCollisionPublisher]] publishes, it searches all
     of the objects that own colliders being tracked by the
     [[ActiveCollisionsContainer]] for [[ActiveCollisionConsumer]]
     components which it will pass collision data to.
***** TODO Event
****** TODO Proxy
******* TODO ActiveCollisionConsumerEventProxyEmitter                   :api:
******* TODO ActiveCollisionsContainerEventProxyEmitter                 :api:
***** TODO Operation
****** TODO Extraction
******* TODO NotifierContainerExtractor                                 :api:
******* TODO NotifierTargetExtractor                                    :api:
******* TODO PublisherContainerExtractor                                :api:
****** TODO NearestSorter                                               :api:
****** TODO OrderReverser                                               :api:
****** TODO Slicer                                                      :api:
***** ActiveCollisionConsumer                                      :api:
      Objects involved in collisions that feature this component will
      recieve information about those collisions from a related
      [[ActiveCollisionPublisher]].
***** ActiveCollisionPublisher                                          :api:
      Publishes itself, and relevant collision information, to any
      [[ActiveCollisionConsumer]] components found on objects within a
      related [[ActiveCollisionsContainer]].
***** ActiveCollisionsContainer                                         :api:
      Holds a collection of current collisions raised by a
      [[CollisionNotifier]].
***** TODO CollisionPointContainer                                      :api:
**** TODO Event
***** TODO Proxy
****** TODO CollisionNotifierEventProxyEmitter                          :api:
**** TODO CollisionIgnorer                                              :api:
**** TODO CollisionNotifier                                             :api:
     Recieves and propagates local collision events via Unity
     Events. The events are propagated as
     [[CollisionNotifier.EventData]] instances.
***** CollisionNotifier.EventData
      Contains information about a collision:

      - ~IsTrigger~ whether the collider was set to ~isTrigger~.
      - ~CollisionData~ the Unity collision event data.
      - ~ColliderData~ the Collider that was involved.
**** TODO CollisionTracker                                              :api:
*** TODO Follow
**** TODO Modifier
***** TODO Property
****** TODO Position
******* TODO RigidbodyVelocity                                          :api:
******* TODO TransformPosition                                          :api:
****** TODO Rotation
******* TODO RigidbodyAngularVelocity                                   :api:
******* TODO RigidbodyForceAtPosition                                   :api:
******* TODO TransformPositionDifferenceRotation                        :api:
******* TODO TransformRotation                                          :api:
****** TODO Scale
******* TODO TransformScale                                             :api:
****** TODO PropertyModifier                                            :api:
***** TODO FollowModifier                                               :api:
**** TODO Operation
***** TODO Extraction
****** TODO ObjectDistanceComparatorEventDataExtractor                  :api:
**** TODO ObjectDistanceComparator                                      :api:
**** TODO ObjectFollower                                                :api:
*** TODO Modification
**** TODO Operation
***** TODO Extraction
****** TODO TransformPropertyApplierEventDataExtractor                  :api:
**** TODO ComponentEnabledStateModifier                                 :api:
**** TODO DirectionModifier                                             :api:
**** TODO GameObjectStateMirror                                         :api:
**** TODO GameObjectStateSwitcher                                       :api:
**** TODO PinchScaler                                                   :api:
**** TODO PointNormalRotator                                            :api:
**** TODO TransformPropertyApplier                                      :api:
*** TODO Query
**** TODO FacingQuery                                                   :api:
**** TODO ObscuranceQuery                                               :api:
*** TODO Velocity
**** TODO Collection
***** TODO VelocityTrackerObservableList
**** TODO ArtificialVelocityApplier                                     :api:
**** TODO AverageVelocityEstimator                                      :api:
**** TODO ComponentTrackerProxy                                         :api:
**** TODO VelocityApplier                                               :api:
**** TODO VelocityEmitter                                               :api:
**** TODO VelocityMultiplier                                            :api:
**** TODO VelocityTracker                                               :api:
**** TODO VelocityTrackerProcessor                                      :api:
**** TODO XRNodeVelocityEstimator                                       :api:
*** TODO SurfaceLocator                                                 :api:
** TODO Utility
*** TODO BeizerCurveGenerator
*** TODO CountdownTimer                                                 :api:
*** TODO InterfaceContainer                                             :api:
** TODO Visual
*** TODO CameraColorOverlay                                             :api:
*** TODO PointsRenderer                                                 :api:
